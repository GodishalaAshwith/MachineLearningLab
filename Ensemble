{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":13317911,"sourceType":"datasetVersion","datasetId":8442624},{"sourceId":13318337,"sourceType":"datasetVersion","datasetId":8442934}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"/kaggle/input/heart-data/heart (1).csv\")\nprint(df.head())\n\n\nprint(df.isnull().sum())\n\nX = df.drop(\"target\", axis=1)\ny = df[\"target\"]\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X_scaled, y, test_size=0.2, random_state=42, stratify=y\n)\n\nprint(f\"Training set size: {X_train.shape}\")\nprint(f\"Test set size: {X_test.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T05:06:33.057876Z","iopub.execute_input":"2025-10-10T05:06:33.058196Z","iopub.status.idle":"2025-10-10T05:06:33.086993Z","shell.execute_reply.started":"2025-10-10T05:06:33.058176Z","shell.execute_reply":"2025-10-10T05:06:33.085982Z"}},"outputs":[{"name":"stdout","text":"   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n0   52    1   0       125   212    0        1      168      0      1.0      2   \n1   53    1   0       140   203    1        0      155      1      3.1      0   \n2   70    1   0       145   174    0        1      125      1      2.6      0   \n3   61    1   0       148   203    0        1      161      0      0.0      2   \n4   62    0   0       138   294    1        1      106      0      1.9      1   \n\n   ca  thal  target  \n0   2     3       0  \n1   0     3       0  \n2   0     3       0  \n3   1     3       0  \n4   3     2       0  \nage         0\nsex         0\ncp          0\ntrestbps    0\nchol        0\nfbs         0\nrestecg     0\nthalach     0\nexang       0\noldpeak     0\nslope       0\nca          0\nthal        0\ntarget      0\ndtype: int64\nTraining set size: (820, 13)\nTest set size: (205, 13)\n","output_type":"stream"}],"execution_count":33},{"cell_type":"markdown","source":"# 1","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef evaluate_model(model, name):\n    y_pred = model.predict(X_test)\n    print(f\"\\n{name} Evaluation Metrics:\")\n    print(f\"Accuracy : {accuracy_score(y_test, y_pred):.4f}\")\n    print(f\"Precision: {precision_score(y_test, y_pred):.4f}\")\n    print(f\"Recall   : {recall_score(y_test, y_pred):.4f}\")\n    print(f\"F1-score : {f1_score(y_test, y_pred):.4f}\")\n    return {\n        'model': name,\n        'accuracy': accuracy_score(y_test, y_pred),\n        'precision': precision_score(y_test, y_pred),\n        'recall': recall_score(y_test, y_pred),\n        'f1': f1_score(y_test, y_pred)\n    }\n\n\ndt_model = DecisionTreeClassifier(random_state=42)\ndt_model.fit(X_train, y_train)\ndt_results = evaluate_model(dt_model, \"Decision Tree\")\n\n\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\nrf_results = evaluate_model(rf_model, \"Random Forest (100 trees)\")\n\n\nestimators = [1, 5, 10, 25, 50, 100, 200]\nrf_scores = []\n\nfor n in estimators:\n    rf = RandomForestClassifier(n_estimators=n, random_state=42)\n    rf.fit(X_train, y_train)\n    y_pred = rf.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    rf_scores.append(acc)\n\n# Plotting performance over estimators\nplt.figure(figsize=(10,6))\nsns.lineplot(x=estimators, y=rf_scores, marker='o')\nplt.title('Effect of n_estimators on Random Forest Accuracy')\nplt.xlabel('Number of Estimators (Trees)')\nplt.ylabel('Accuracy')\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T04:13:15.469170Z","iopub.execute_input":"2025-10-10T04:13:15.469502Z","iopub.status.idle":"2025-10-10T04:13:16.716899Z","shell.execute_reply.started":"2025-10-10T04:13:15.469477Z","shell.execute_reply":"2025-10-10T04:13:16.715478Z"}},"outputs":[{"name":"stdout","text":"\nDecision Tree Evaluation Metrics:\nAccuracy : 0.9854\nPrecision: 1.0000\nRecall   : 0.9714\nF1-score : 0.9855\n\nRandom Forest (100 trees) Evaluation Metrics:\nAccuracy : 1.0000\nPrecision: 1.0000\nRecall   : 1.0000\nF1-score : 1.0000\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":15},{"cell_type":"markdown","source":"Observations\n\nDecision Tree gives high accuracy but seems to be generalized, while random forest gives 100% accuracy which clearly means it is overfitting.\n\nIncreasing number of estimators initially increases the accuracy significantly, but after the second or third value of estimator the model overfits. Here the model seems to perform best without overfitting is at estimator value 5.\n\nRandom Forest generally performs better than a single Decision Tree because it reduces overfitting by averaging multiple trees trained on different subsets of data and features. This ensemble approach lowers variance and improves generalization.\nHowever, if the dataset is small, has data leakage, or the trees are too deep, even Random Forest can overfit and show unrealistically high accuracy — as in this case.","metadata":{}},{"cell_type":"markdown","source":"# 2","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\n\nm1 = LogisticRegression(max_iter=1000)\nm2 = DecisionTreeClassifier(random_state=42)\nm3 = RandomForestClassifier(random_state=42)\n\nm1.fit(X_train, y_train); acc1 = accuracy_score(y_test, m1.predict(X_test))\nm2.fit(X_train, y_train); acc2 = accuracy_score(y_test, m2.predict(X_test))\nm3.fit(X_train, y_train); acc3 = accuracy_score(y_test, m3.predict(X_test))\n\n\nv1 = VotingClassifier([('lr', m1), ('dt', m2), ('rf', m3)], voting='hard')\nv1.fit(X_train, y_train); acc_max = accuracy_score(y_test, v1.predict(X_test))\n\n\nv2 = VotingClassifier([('lr', m1), ('dt', m2), ('rf', m3)], voting='soft')\nv2.fit(X_train, y_train); acc_avg = accuracy_score(y_test, v2.predict(X_test))\n\n\nweights = [acc1, acc2, acc3]\nv3 = VotingClassifier([('lr', m1), ('dt', m2), ('rf', m3)], voting='soft', weights=weights)\nv3.fit(X_train, y_train); acc_weighted = accuracy_score(y_test, v3.predict(X_test))\n\n\nprint(\"\\nAccuracy Comparison:\")\nprint(f\"Logistic Regression : {acc1:.3f}\")\nprint(f\"Decision Tree       : {acc2:.3f}\")\nprint(f\"Random Forest       : {acc3:.3f}\")\nprint(f\"Max Voting          : {acc_max:.3f}\")\nprint(f\"Average Voting      : {acc_avg:.3f}\")\nprint(f\"Weighted Avg Voting : {acc_weighted:.3f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T05:06:46.859908Z","iopub.execute_input":"2025-10-10T05:06:46.860228Z","iopub.status.idle":"2025-10-10T05:06:48.101873Z","shell.execute_reply.started":"2025-10-10T05:06:46.860206Z","shell.execute_reply":"2025-10-10T05:06:48.100567Z"}},"outputs":[{"name":"stdout","text":"\nAccuracy Comparison:\nLogistic Regression : 0.810\nDecision Tree       : 0.985\nRandom Forest       : 1.000\nMax Voting          : 1.000\nAverage Voting      : 1.000\nWeighted Avg Voting : 1.000\n","output_type":"stream"}],"execution_count":34},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"Max voting, average voting, and weighted voting all produce perfect accuracy here because the strongest models dominate, but generally max voting relies on majority class, average voting considers predicted probabilities, and weighted voting emphasizes stronger models.\n\nWeights improve ensemble predictions by giving more influence to models with higher accuracy, ensuring weaker models have less effect and the overall prediction is more reliable.\n\nDecision Tree and Random Forest combine most effectively in this dataset, as their high accuracy drives the ensemble to perfect predictions under all voting schemes.","metadata":{}},{"cell_type":"markdown","source":"# 3","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.metrics import accuracy_score\n\nestimators = []\nestimators.append(('LR', LogisticRegression(solver='lbfgs', multi_class='multinomial', max_iter=200)))\nestimators.append(('DTC', DecisionTreeClassifier()))\nestimators.append(('KNN', KNeighborsClassifier(n_neighbors=5)))\n\nhard_voting = VotingClassifier(estimators=estimators, voting='hard')\nsoft_voting = VotingClassifier(estimators=estimators, voting='soft')\nhard_voting.fit(X_train, y_train)\nsoft_voting.fit(X_train, y_train)\n\nhard_score = accuracy_score(y_test, hard_voting.predict(X_test))\nsoft_score = accuracy_score(y_test, soft_voting.predict(X_test))\nprint(\"Hard Voting Score: %0.3f\" % hard_score)\nprint(\"Soft Voting Score: %0.3f\" % soft_score)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T05:13:52.216048Z","iopub.execute_input":"2025-10-10T05:13:52.216392Z","iopub.status.idle":"2025-10-10T05:13:52.303727Z","shell.execute_reply.started":"2025-10-10T05:13:52.216364Z","shell.execute_reply":"2025-10-10T05:13:52.301661Z"}},"outputs":[{"name":"stdout","text":"Hard Voting Score: 0.917\nSoft Voting Score: 0.980\n","output_type":"stream"}],"execution_count":35},{"cell_type":"markdown","source":"1. Main difference in prediction mechanisms:\nHard voting predicts the class chosen by the majority of base classifiers, while soft voting predicts the class with the highest average predicted probability across classifiers.\n\n2. Situations where soft voting outperforms hard voting:\nSoft voting tends to outperform hard voting when base classifiers are well-calibrated and produce meaningful probability estimates, especially if some classifiers are stronger than others or the dataset is imbalanced.\n\n3. Influence of probability calibration on soft voting:\nSoft voting relies on the predicted probabilities from each classifier, so if these probabilities are poorly calibrated or biased, the ensemble decision can be skewed; well-calibrated probabilities ensure that stronger models appropriately influence the final prediction","metadata":{}},{"cell_type":"markdown","source":"# 4","metadata":{}},{"cell_type":"code","source":"# Import necessary libraries\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\n\ndef evaluate_random_forest(n_estimators_list, max_depth_list, random_states):\n    for n in n_estimators_list:\n        for depth in max_depth_list:\n            for rs in random_states:\n                rf = RandomForestClassifier(n_estimators=n, max_depth=depth, random_state=rs)\n                rf.fit(X_train, y_train)\n                y_pred = rf.predict(X_test)\n                acc = accuracy_score(y_test, y_pred)\n                print(f\"n_estimators={n}, max_depth={depth}, random_state={rs} --> Accuracy: {acc:.3f}\")\n\n\nn_estimators_list = [10, 50, 100]\nmax_depth_list = [None, 5, 10]\nrandom_states = [0, 42]\n\nevaluate_random_forest(n_estimators_list, max_depth_list, random_states)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-10T05:16:21.730948Z","iopub.execute_input":"2025-10-10T05:16:21.731942Z","iopub.status.idle":"2025-10-10T05:16:23.551394Z","shell.execute_reply.started":"2025-10-10T05:16:21.731908Z","shell.execute_reply":"2025-10-10T05:16:23.550309Z"}},"outputs":[{"name":"stdout","text":"n_estimators=10, max_depth=None, random_state=0 --> Accuracy: 1.000\nn_estimators=10, max_depth=None, random_state=42 --> Accuracy: 1.000\nn_estimators=10, max_depth=5, random_state=0 --> Accuracy: 0.922\nn_estimators=10, max_depth=5, random_state=42 --> Accuracy: 0.917\nn_estimators=10, max_depth=10, random_state=0 --> Accuracy: 1.000\nn_estimators=10, max_depth=10, random_state=42 --> Accuracy: 1.000\nn_estimators=50, max_depth=None, random_state=0 --> Accuracy: 1.000\nn_estimators=50, max_depth=None, random_state=42 --> Accuracy: 1.000\nn_estimators=50, max_depth=5, random_state=0 --> Accuracy: 0.922\nn_estimators=50, max_depth=5, random_state=42 --> Accuracy: 0.932\nn_estimators=50, max_depth=10, random_state=0 --> Accuracy: 1.000\nn_estimators=50, max_depth=10, random_state=42 --> Accuracy: 1.000\nn_estimators=100, max_depth=None, random_state=0 --> Accuracy: 1.000\nn_estimators=100, max_depth=None, random_state=42 --> Accuracy: 1.000\nn_estimators=100, max_depth=5, random_state=0 --> Accuracy: 0.927\nn_estimators=100, max_depth=5, random_state=42 --> Accuracy: 0.927\nn_estimators=100, max_depth=10, random_state=0 --> Accuracy: 1.000\nn_estimators=100, max_depth=10, random_state=42 --> Accuracy: 1.000\n","output_type":"stream"}],"execution_count":36}]}