{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":13456663,"sourceType":"datasetVersion","datasetId":8541813}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# clustering_pipeline.py\n# Full pipeline: cleaning, distance measures, kmeans+elbow, k-medoids (for other metrics), hierarchical, birch, chameleon-approx,\n# divisive-approx, DBSCAN, Spectral. Saves results to /mnt/data/clustering_results_summary.csv and a text report.\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN, SpectralClustering, Birch\nfrom sklearn.metrics import pairwise_distances, silhouette_score\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.neighbors import kneighbors_graph\nfrom scipy.cluster.hierarchy import linkage, dendrogram\nfrom sklearn.cluster import KMeans as SKKMeans\n\n# ---------- USER PARAMETERS ----------\nINPUT_CSV = \"/kaggle/input/live-clustering/Live.csv\"   # path to uploaded CSV\nK = 3                              # default number of clusters for many methods\nSAMPLE_SIZE = None                 # set to e.g. 1000 to run on a subset (None => use full dataset)\nSAVE_DIR = \"/mnt/data\"             # where to save outputs\n# -------------------------------------\n\nif not os.path.exists(INPUT_CSV):\n    raise FileNotFoundError(f\"{INPUT_CSV} not found. Upload your file to /mnt/data/\")\n\n# load\ndf = pd.read_csv(INPUT_CSV)\nprint(\"Original shape:\", df.shape)\n\n# optionally sample for speed (useful if environment is constrained)\nif SAMPLE_SIZE is not None:\n    df = df.sample(min(SAMPLE_SIZE, len(df)), random_state=42).reset_index(drop=True)\n    print(\"Using sample, new shape:\", df.shape)\n\n# Preprocessing: numeric impute+scale, categorical impute+onehot\nnumeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\ncat_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()\nprint(\"Numeric cols:\", numeric_cols)\nprint(\"Categorical cols:\", cat_cols)\n\nnumeric_transformer = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])\ncategorical_transformer = Pipeline([\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse=False))\n])\npreprocessor = ColumnTransformer([\n    ('num', numeric_transformer, numeric_cols),\n    ('cat', categorical_transformer, cat_cols)\n], remainder='drop')\n\nX_arr = preprocessor.fit_transform(df)  # numpy array\nX = pd.DataFrame(X_arr)                  # don't force precise column names (keeps it robust)\n\n# ---------- Distance / similarity functions ----------\ndef euclidean_distance_matrix(array):\n    return pairwise_distances(array, metric='euclidean')\n\ndef manhattan_distance_matrix(array):\n    return pairwise_distances(array, metric='manhattan')\n\ndef minkowski_distance_matrix(array, p=3):\n    return pairwise_distances(array, metric='minkowski', p=p)\n\ndef cosine_distance_matrix(array):\n    sim = cosine_similarity(array)\n    return 1.0 - sim\n\ndef jaccard_distance_matrix_binary(array):\n    # Jaccard is for binary data; we binarize by thresholding at 0 (works on standardized numeric/onehot mix)\n    Xbin = (array > 0).astype(int)\n    return pairwise_distances(Xbin, metric='jaccard')\n\n# ---------- KMeans + Elbow (Euclidean only) ----------\ndef elbow_plot(X, k_range=range(1,11), random_state=42):\n    sse = []\n    for k in k_range:\n        km = KMeans(n_clusters=k, random_state=random_state, n_init=10)\n        km.fit(X)\n        sse.append(km.inertia_)\n    plt.figure()\n    plt.plot(list(k_range), sse, marker='o')\n    plt.title(\"Elbow plot (SSE vs k)\")\n    plt.xlabel(\"k\")\n    plt.ylabel(\"SSE (inertia)\")\n    plt.grid(True)\n    plt.show()\n\nprint(\"Elbow plot (this may take a moment for larger datasets):\")\nelbow_plot(X_arr, k_range=range(1,8))\n\nkmeans = KMeans(n_clusters=K, random_state=42, n_init=10).fit(X_arr)\nlabels_kmeans = kmeans.labels_\nprint(\"KMeans inertia:\", kmeans.inertia_)\nif len(set(labels_kmeans))>1:\n    print(\"KMeans silhouette:\", silhouette_score(X_arr, labels_kmeans))\n\n# ---------- K-medoids (PAM-like) implementation (works with arbitrary distance metric) ----------\ndef kmedoids(Xarray, k=3, distance_metric='euclidean', max_iter=300, random_state=42):\n    n = Xarray.shape[0]\n    rng = np.random.RandomState(random_state)\n    # small optimization: do not compute full distance for jaccard on large data unless necessary\n    if distance_metric == 'euclidean':\n        D = euclidean_distance_matrix(Xarray)\n    elif distance_metric == 'manhattan':\n        D = manhattan_distance_matrix(Xarray)\n    elif distance_metric == 'cosine':\n        D = cosine_distance_matrix(Xarray)\n    elif distance_metric == 'minkowski':\n        D = minkowski_distance_matrix(Xarray, p=3)\n    elif distance_metric == 'jaccard':\n        D = jaccard_distance_matrix_binary(Xarray)\n    else:\n        raise ValueError(\"Unsupported distance metric\")\n    medoids = rng.choice(n, size=k, replace=False)\n    labels = np.argmin(D[:, medoids], axis=1)\n    for it in range(max_iter):\n        changed = False\n        for i_med in range(k):\n            members = np.where(labels == i_med)[0]\n            if len(members) == 0:\n                continue\n            # choose medoid minimizing sum of distances inside cluster\n            costs = D[np.ix_(members, members)].sum(axis=1)\n            candidate = members[np.argmin(costs)]\n            if medoids[i_med] != candidate:\n                medoids[i_med] = candidate\n                changed = True\n        labels = np.argmin(D[:, medoids], axis=1)\n        if not changed:\n            break\n    total_cost = D[np.arange(n), medoids[labels]].sum()\n    return medoids, labels, total_cost\n\n# Run k-medoids for requested metrics (beware time for full data)\nmetrics = ['euclidean','manhattan','cosine','minkowski','jaccard']\nkmed_results = {}\nfor m in metrics:\n    print(\"Running k-medoids for metric:\", m)\n    med, lbls, cost = kmedoids(X_arr, k=K, distance_metric=m)\n    kmed_results[m] = {'medoids': med, 'labels': lbls, 'cost': cost}\n    if len(set(lbls))>1:\n        print(\" silhouette:\", silhouette_score(X_arr, lbls))\n    else:\n        print(\" silhouette: N/A (single cluster)\")\n\n# ---------- Agglomerative Hierarchical (linkages) ----------\nlinkages = ['single','complete','average','ward']\nagg_labels = {}\nfor link in linkages:\n    print(\"Agglomerative clustering with linkage:\", link)\n    ac = AgglomerativeClustering(n_clusters=K, linkage=link)\n    lab = ac.fit_predict(X_arr)\n    agg_labels[link] = lab\n    if len(set(lab))>1:\n        print(\" silhouette:\", silhouette_score(X_arr, lab))\n\n# Dendrogram (display truncated)\nZ = linkage(X_arr, method='ward')\nplt.figure(figsize=(10,4))\ndendrogram(Z, truncate_mode='level', p=5)\nplt.title(\"Hierarchical dendrogram (ward, truncated)\")\nplt.show()\n\n# ---------- BIRCH ----------\nbirch = Birch(n_clusters=K).fit(X_arr)\nbirch_labels = birch.labels_\nif len(set(birch_labels))>1:\n    print(\"BIRCH silhouette:\", silhouette_score(X_arr, birch_labels))\n\n# ---------- CHAMELEON (approximation)\n# Note: full CHAMELEON is complex. Below is a pragmatic approximation:\n# 1) build many small initial clusters (KMeans),\n# 2) compute inter-cluster connectivity via kNN graph,\n# 3) merge clusters greedily using a combined score of relative interconnectivity & closeness.\ndef chameleon_approx(Xarray, initial_clusters=20, final_k=3):\n    init_k = min(initial_clusters, max(2, Xarray.shape[0] // 50))\n    km = SKKMeans(n_clusters=init_k, random_state=42, n_init=10).fit(Xarray)\n    labels_init = km.labels_\n    clusters = {i: np.where(labels_init==i)[0] for i in range(init_k)}\n    # build kNN graph sparse\n    A = kneighbors_graph(Xarray, n_neighbors=min(20, Xarray.shape[0]-1), include_self=False).toarray()\n    inter = np.zeros((init_k, init_k))\n    internal = np.zeros(init_k)\n    for i in range(init_k):\n        idx_i = clusters[i]; internal[i] = A[np.ix_(idx_i, idx_i)].sum()\n        for j in range(i+1, init_k):\n            idx_j = clusters[j]; inter[i,j] = inter[j,i] = A[np.ix_(idx_i, idx_j)].sum()\n    ric = inter / (internal.reshape(-1,1) + internal.reshape(1,-1) + 1e-9)\n    centroids = np.array([Xarray[clusters[i]].mean(axis=0) for i in range(init_k)])\n    centd = pairwise_distances(centroids)\n    score = ric * (1 / (1 + centd))\n    current = {i: clusters[i].tolist() for i in clusters}\n    while len(current) > final_k:\n        keys = list(current.keys())\n        best_pair = None; best_score = -1\n        for i_idx in range(len(keys)):\n            for j_idx in range(i_idx+1, len(keys)):\n                a = keys[i_idx]; b = keys[j_idx]\n                s = score[a,b] if a<score.shape[0] and b<score.shape[1] else 0\n                if s > best_score: best_score = s; best_pair=(a,b)\n        if best_pair is None:\n            break\n        a,b = best_pair\n        current[a] = current[a] + current[b]\n        del current[b]\n    labels_final = np.empty(Xarray.shape[0], dtype=int)\n    for new_label,(oldk, ids) in enumerate(current.items()):\n        labels_final[ids] = new_label\n    return labels_final\n\nch_labels = chameleon_approx(X_arr, initial_clusters=30, final_k=K)\nif len(set(ch_labels))>1:\n    print(\"CHAMELEON-approx silhouette:\", silhouette_score(X_arr, ch_labels))\n\n# ---------- Divisive (DIANA-like) approximation ----------\ndef divisive_diana(Xarray, target_k=3):\n    clusters = {0: np.arange(Xarray.shape[0])}\n    while len(clusters) < target_k:\n        # pick cluster to split (largest SSE)\n        sse = {}\n        for ck, idxs in clusters.items():\n            if len(idxs) <= 1:\n                sse[ck] = 0\n            else:\n                center = Xarray[idxs].mean(axis=0)\n                sse[ck] = ((Xarray[idxs] - center)**2).sum()\n        to_split = max(sse, key=lambda c: sse[c])\n        idxs = clusters[to_split]\n        if len(idxs) <= 2:\n            break\n        km2 = SKKMeans(n_clusters=2, random_state=42, n_init=10).fit(Xarray[idxs])\n        label2 = km2.labels_\n        # replace cluster to_split with two clusters\n        new_key = max(clusters.keys()) + 1\n        clusters[to_split] = idxs[label2==0]\n        clusters[new_key] = idxs[label2==1]\n    final_labels = np.empty(Xarray.shape[0], dtype=int)\n    for new_label,(kkey, ids) in enumerate(clusters.items()):\n        final_labels[ids] = new_label\n    return final_labels\n\ndiv_labels = divisive_diana(X_arr, target_k=K)\nif len(set(div_labels))>1:\n    print(\"Divisive silhouette:\", silhouette_score(X_arr, div_labels))\n\n# ---------- Linkages (single, complete, average, centroid, ward)\nZ_single = linkage(X_arr, method='single')\nZ_complete = linkage(X_arr, method='complete')\nZ_average = linkage(X_arr, method='average')\nZ_centroid = linkage(X_arr, method='centroid')\nZ_ward = linkage(X_arr, method='ward')\nprint(\"Linkage matrices computed.\")\n\n# ---------- DBSCAN ----------\ndb = DBSCAN(eps=0.5, min_samples=5).fit(X_arr)\ndb_labels = db.labels_\nprint(\"DBSCAN clusters (excluding noise):\", len(set(db_labels) - {-1}))\nif len(set(db_labels) - {-1}) > 1:\n    print(\"DBSCAN silhouette (ignoring noise):\", silhouette_score(X_arr[db_labels!=-1], db_labels[db_labels!=-1]))\n\n# ---------- Spectral Clustering ----------\nsc = SpectralClustering(n_clusters=K, affinity='nearest_neighbors', random_state=42, assign_labels='kmeans')\nsc_labels = sc.fit_predict(X_arr)\nif len(set(sc_labels))>1:\n    print(\"Spectral silhouette:\", silhouette_score(X_arr, sc_labels))\n\n# ---------- Save results ----------\nsummary = pd.DataFrame({\n    'kmeans': labels_kmeans,\n    'kmed_euclid': kmed_results['euclidean']['labels'],\n    'kmed_manhattan': kmed_results['manhattan']['labels'],\n    'birch': birch_labels,\n    'chameleon_approx': ch_labels,\n    'divisive': div_labels,\n    'dbscan': db_labels,\n    'spectral': sc_labels\n})\nout_csv = os.path.join(SAVE_DIR, \"clustering_results_summary.csv\")\nsummary.to_csv(out_csv, index=False)\nprint(\"Saved cluster summary to:\", out_csv)\n\nreport_path = os.path.join(SAVE_DIR, \"clustering_report.txt\")\nwith open(report_path, \"w\") as f:\n    f.write(\"Clustering pipeline report\\n\")\n    f.write(f\"Input: {INPUT_CSV}\\nRows used: {X_arr.shape[0]}\\nColumns after preprocessing: {X_arr.shape[1]}\\n\")\n    f.write(\"Methods run: KMeans (elbow), K-Medoids (euclid/manh/cos/mink/jaccard), Agglomerative (single/complete/average/ward), BIRCH, CHAMELEON-approx, Divisive (DIANA-approx), DBSCAN, Spectral\\n\")\nprint(\"Report saved to:\", report_path)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-21T16:50:06.185595Z","iopub.execute_input":"2025-10-21T16:50:06.185946Z"}},"outputs":[{"name":"stdout","text":"Original shape: (7050, 16)\nNumeric cols: ['num_reactions', 'num_comments', 'num_shares', 'num_likes', 'num_loves', 'num_wows', 'num_hahas', 'num_sads', 'num_angrys', 'Column1', 'Column2', 'Column3', 'Column4']\nCategorical cols: ['status_id', 'status_type', 'status_published']\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Elbow plot (this may take a moment for larger datasets):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"KMeans inertia: 55905.216510200524\nKMeans silhouette: 0.5100273029142446\nRunning k-medoids for metric: euclidean\n silhouette: 0.43885395166163593\nRunning k-medoids for metric: manhattan\n silhouette: 0.18032329692936752\nRunning k-medoids for metric: cosine\n silhouette: 0.3015911905645469\nRunning k-medoids for metric: minkowski\n","output_type":"stream"}],"execution_count":null}]}