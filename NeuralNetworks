{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":31155,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Simple Perceptron\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\ndef sigmoid(x):\n  # Our activation function: f(x) = 1 / (1 + e^(-x))\n  return 1 / (1 + np.exp(-x))\n\nclass Neuron:\n  def __init__(self, weights, bias):\n    self.weights = weights\n    self.bias = bias\n\n  def feedforward(self, inputs):\n    # Weight inputs, add bias, then use the activation function\n    total = np.dot(self.weights, inputs) + self.bias\n    return sigmoid(total)\n\nweights = np.array([0, 1]) # w1 = 0, w2 = 1\nbias = 4                   # b = 4\nn = Neuron(weights, bias)\n\nx = np.array([2, 3])       # x1 = 2, x2 = 3\nprint(n.feedforward(x)) \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-17T04:25:07.890155Z","iopub.execute_input":"2025-10-17T04:25:07.890431Z","iopub.status.idle":"2025-10-17T04:25:07.902682Z","shell.execute_reply.started":"2025-10-17T04:25:07.890406Z","shell.execute_reply":"2025-10-17T04:25:07.901820Z"}},"outputs":[{"name":"stdout","text":"0.9990889488055994\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"Perceptron with Activation function","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\nclass Perceptron:\n   def __init__(self, learning_rate=0.1, epochs=100):\n      self.learning_rate = learning_rate\n      self.epochs = epochs\n      self.weights = None\n      self.bias = None\n\n   def step_function(self, x):\n      return np.where(x >= 0, 1, 0)\n\n   def fit(self, X, y):\n      n_samples, n_features = X.shape\n\n      # initialize weights and bias to 0\n      self.weights = np.zeros(n_features)\n      self.bias = 0\n\n      # iterate over epochs and update weights and bias\n      for _ in range(self.epochs):\n         for i in range(n_samples):\n            linear_output = np.dot(self.weights, X[i]) + self.bias\n            y_pred = self.step_function(linear_output)\n\n            # update weights and bias based on error\n            update = self.learning_rate * (y[i] - y_pred)\n            self.weights += update * X[i]\n            self.bias += update\n   \n   def predict(self, X):\n      linear_output = np.dot(X, self.weights) + self.bias\n      y_pred = self.step_function(linear_output)\n      return y_pred\n\n# Input data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 0, 0, 1])\n\n# Train the perceptron\nperceptron = Perceptron(learning_rate=0.1, epochs=10)\nperceptron.fit(X, y)\n\n# Test data\ntest_data = np.array([[1, 1], [0, 1]])\npredictions = perceptron.predict(test_data)\nprint(predictions)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-17T04:28:14.940842Z","iopub.execute_input":"2025-10-17T04:28:14.941185Z","iopub.status.idle":"2025-10-17T04:28:14.955110Z","shell.execute_reply.started":"2025-10-17T04:28:14.941145Z","shell.execute_reply":"2025-10-17T04:28:14.954455Z"}},"outputs":[{"name":"stdout","text":"[1 0]\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import numpy as np\n\nclass NeuralNetwork:\n    def __init__(self, learning_rate=0.1, epochs=10000):\n        self.learning_rate = learning_rate\n        self.epochs = epochs\n        self.weights = None\n        self.bias = None\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n\n    def fit(self, X, y):\n        n_samples, n_features = X.shape\n        self.weights = np.random.rand(n_features)\n        self.bias = np.random.rand()\n\n        for _ in range(self.epochs):\n            # Forward pass\n            linear_output = np.dot(X, self.weights) + self.bias\n            y_pred = self.sigmoid(linear_output)\n\n            # Compute error\n            error = y - y_pred\n\n            # Backward pass (Gradient Descent)\n            d_pred = error * self.sigmoid_derivative(y_pred)\n            self.weights += self.learning_rate * np.dot(X.T, d_pred)\n            self.bias += self.learning_rate * np.sum(d_pred)\n\n    def predict(self, X):\n        linear_output = np.dot(X, self.weights) + self.bias\n        y_pred = self.sigmoid(linear_output)\n        return np.round(y_pred)\n\n# XOR data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 1, 1, 0])  # XOR output\n\n# Create and train the neural network\nnn = NeuralNetwork(learning_rate=0.1, epochs=10000)\nnn.fit(X, y)\n\n# Predictions\ntest_data = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\npredictions = nn.predict(test_data)\nprint(predictions)  # Output should be [0, 1, 1, 0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-17T04:29:33.594368Z","iopub.execute_input":"2025-10-17T04:29:33.594660Z","iopub.status.idle":"2025-10-17T04:29:33.828594Z","shell.execute_reply.started":"2025-10-17T04:29:33.594636Z","shell.execute_reply":"2025-10-17T04:29:33.827801Z"}},"outputs":[{"name":"stdout","text":"[0. 0. 0. 0.]\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"MLP with single hidden layer","metadata":{}},{"cell_type":"code","source":"#MLP with single hidden layer\nimport numpy as np\n\nimport numpy as np\n\n# --- Activation Function ---\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function: f(x) = 1 / (1 + e^(-x))\"\"\"\n    return 1 / (1 + np.exp(-x))\n\n# --- Neuron Class ---\nclass Neuron:\n    def __init__(self, weights, bias):\n        self.weights = weights\n        self.bias = bias\n\n    def feedforward(self, inputs):\n        \"\"\"Compute neuron output using weights, bias, and activation function.\"\"\"\n        total = np.dot(self.weights, inputs) + self.bias\n        return sigmoid(total)\nclass OurNeuralNetwork:\n  '''\n  A neural network with:\n    - 2 inputs\n    - a hidden layer with 2 neurons (h1, h2)\n    - an output layer with 1 neuron (o1)\n  Each neuron has the same weights and bias:\n    - w = [0, 1]\n    - b = 0\n  '''\n  def __init__(self):\n    weights = np.array([0, 1])\n    bias = 0\n# The Neuron class here is from the previous section\n    self.h1 = Neuron(weights, bias)\n    self.h2 = Neuron(weights, bias)\n    self.o1 = Neuron(weights, bias)\n\n  def feedforward(self, x):\n    out_h1 = self.h1.feedforward(x)\n    out_h2 = self.h2.feedforward(x)\n\n    # The inputs for o1 are the outputs from h1 and h2\n    out_o1 = self.o1.feedforward(np.array([out_h1, out_h2]))\n\n    return out_o1\n\nnetwork = OurNeuralNetwork()\nx = np.array([2, 3])\nprint(network.feedforward(x)) # 0.7216325609518421","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-17T04:35:56.390734Z","iopub.execute_input":"2025-10-17T04:35:56.391068Z","iopub.status.idle":"2025-10-17T04:35:56.399649Z","shell.execute_reply.started":"2025-10-17T04:35:56.391045Z","shell.execute_reply":"2025-10-17T04:35:56.398707Z"}},"outputs":[{"name":"stdout","text":"0.7216325609518421\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"MLP on MNIST dataset and display its train and test data score. ","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.datasets import mnist\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\n# Load MNIST directly from Keras (auto-cached)\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Flatten 28×28 → 784 and normalize\nX_train = X_train.reshape(len(X_train), -1) / 255.0\nX_test  = X_test.reshape(len(X_test), -1) / 255.0\n\n# Use only small subset for speed\nX_train, y_train = X_train[:5000], y_train[:5000]\nX_test, y_test = X_test[:1000], y_test[:1000]\n\nmlp = MLPClassifier(hidden_layer_sizes=(30,), max_iter=20, random_state=1, verbose=False)\nmlp.fit(X_train, y_train)\n\nprint(\"Train acc:\", mlp.score(X_train, y_train))\nprint(\"Test acc:\", mlp.score(X_test, y_test))\n\n# Visualize one digit\nidx = 10\nplt.imshow(X_test[idx].reshape(28, 28), cmap='gray')\nplt.title(f\"Predicted: {mlp.predict([X_test[idx]])[0]} | Actual: {y_test[idx]}\")\nplt.axis('off')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-17T05:13:49.666626Z","iopub.execute_input":"2025-10-17T05:13:49.667148Z","iopub.status.idle":"2025-10-17T05:14:05.561352Z","shell.execute_reply.started":"2025-10-17T05:13:49.667123Z","shell.execute_reply":"2025-10-17T05:14:05.560646Z"}},"outputs":[{"name":"stderr","text":"2025-10-17 05:13:51.389712: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1760678031.634753      37 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1760678031.707669      37 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\nTrain acc: 0.957\nTest acc: 0.895\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (20) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWKklEQVR4nO3ce5BXdf348dcCi6xcDVdDKQRL8saoqKPGVUUnQB0bRCpHREkSU9FQGzEF8ZuW9xBxtBFKSSc1My95YcQrDNGIYygkEpiCk2AIKpgC5/dHw+vHtlz2rCwgPh4zzLDn83l9zns/C5/nns+ePRVFURQBABHRaFsvAIDthygAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkiiwQXvttVecccYZ+fGzzz4bFRUV8eyzz26zNf2v/13j1lZRURGTJk3aZvvfGrbHrzsNSxS2Q5MmTYqKior806xZs9hnn33ixz/+cfzrX//a1ssr5fHHH4/Ro0dv62Vs0Nq1a+OXv/xldOzYMZo1axZdunSJe++9t0H3OXDgwKioqIhLL7203o8xbdq0GD16dHzwwQdbbmENaNGiRTFw4MBo06ZNtGrVKk466aT4xz/+sa2XxUaIwnbsqquuirvvvjtuvfXWOOqoo2LChAlx5JFHxsqVK7f6Wnr06BGrVq2KHj16lJp7/PHHY8yYMQ20qs9n1KhRcemll0afPn1i3Lhx8fWvfz2+//3vx3333dcg+1uxYkU88sgjsddee8W9994b9b3s2LRp02LMmDFfiCh89NFH0bt373juuefisssuizFjxsSsWbOiZ8+e8f7772/r5bEBorAd+853vhOnnXZaDB06NCZNmhQjRoyIBQsWxMMPP7zRmY8//rhB1tKoUaNo1qxZNGq0Y/yTWbRoUdxwww1x7rnnxh133BE//OEP45FHHonu3bvHxRdfHGvWrNni+3zwwQdjzZo1cdddd8Xbb78dzz///Bbfx/bmtttui3nz5sWjjz4al1xySVx44YXx1FNPxbvvvhs33HDDtl4eG7Bj/A//kjj66KMjImLBggUREXHGGWdEixYtYv78+dG3b99o2bJl/OAHP4iI/741cvPNN8f+++8fzZo1i9133z2GDRsWy5Ytq/GYRVHE1VdfHe3bt4+dd945evfuHa+99lqtfW/sveUZM2ZE3759Y5dddonmzZtHly5d4pZbbsn1jR8/PiKixtth62zpNUZEzJ8/P+bPn7/Z5/Lhhx+Ozz77LIYPH57bKioq4pxzzol33nknpk+fvtnHKGvy5MnRp0+f6N27d+y7774xefLkDd5v7ty5MXDgwKiuro6qqqro3LlzjBo1KiIiRo8eHRdffHFERHTs2DGf04ULF8bChQs3+nOOioqKGm/jvfXWWzF8+PDo3LlzVFVVRdu2beOUU06JhQsXbvbzWLlyZcydOzeWLl262fs+8MADcdhhh8Vhhx2W2771rW/FMcccE7///e83O8/W12RbL4C6W/di17Zt29y2evXqOP7446Nbt25x/fXXx8477xwREcOGDYtJkybFkCFD4vzzz48FCxbErbfeGrNmzYqXXnopKisrIyLiiiuuiKuvvjr69u0bffv2jZdffjmOO+64+PTTTze7nqeffjr69+8f7dq1iwsuuCC++tWvxpw5c+LRRx+NCy64IIYNGxaLFy+Op59+Ou6+++5a8w2xxmOOOSYiYrMvbrNmzYrmzZvHvvvuW2P74Ycfnrd369Zts89BXS1evDimTp0av/nNbyIi4nvf+17cdNNNceutt0bTpk3zfq+++mp07949Kisr4+yzz4699tor5s+fH4888kj83//9X3z3u9+NN954I+6999646aabYtddd42IiOrq6liyZEmd1zNz5syYNm1aDBo0KNq3bx8LFy6MCRMmRK9eveL111/Pf0cb8pe//CV69+4dV1555SZ/XrR27dp49dVX48wzz6x12+GHHx5PPfVUfPjhh9GyZcs6r5utoGC7M3HixCIiiilTphRLliwp3n777eK+++4r2rZtW1RVVRXvvPNOURRFMXjw4CIiip/+9Kc15l944YUiIorJkyfX2P7EE0/U2P7ee+8VTZs2Lfr161esXbs273fZZZcVEVEMHjw4t02dOrWIiGLq1KlFURTF6tWri44dOxYdOnQoli1bVmM/6z/WueeeW2zon1lDrLEoiqJDhw5Fhw4dau3vf/Xr16/o1KlTre0ff/zxBp/TDYmIYuLEiZu9X1EUxfXXX19UVVUVK1asKIqiKN54440iIoqHHnqoxv169OhRtGzZsnjrrbdqbF//c7/uuuuKiCgWLFhQ4z4LFizY6Joiorjyyivz45UrV9a6z/Tp04uIKH7729/mtv/9uq+/bf3H25AlS5YUEVFcddVVtW4bP358ERHF3LlzN/kYbH3ePtqOHXvssVFdXR1f+9rXYtCgQdGiRYt46KGHYs8996xxv3POOafGx/fff3+0bt06+vTpE0uXLs0/Xbt2jRYtWsTUqVMjImLKlCnx6aefxnnnnVfjbZ0RI0Zsdm2zZs2KBQsWxIgRI6JNmzY1blv/sTamoda47m2UzVm1alXstNNOtbY3a9Ysb9+SJk+eHP369cvvir/5zW9G165da7yFtGTJknj++efjzDPPjK9//es15uvynJZRVVWVf//ss8/i/fffj2984xvRpk2bePnllzc526tXryiKYrNnla17Drfm88zn5+2j7dj48eNjn332iSZNmsTuu+8enTt3rvWD3iZNmkT79u1rbJs3b14sX748dttttw0+7nvvvRcR/31fOeK/L1Drq66ujl122WWTa1v3VtYBBxxQ909oK69xU6qqquI///lPre2ffPJJ3r6lzJkzJ2bNmhWnn356vPnmm7m9V69eMX78+FixYkW0atUqT9Os73NaxqpVq+Kaa66JiRMnxqJFi2qcCbV8+fItso91z+HWep7ZMkRhO3b44YfHoYceusn77LTTTrVCsXbt2thtt902+oPM6urqLbbG+trWa2zXrl1MnTo1iqKo8V34u+++GxERe+yxxxbb1z333BMRERdeeGFceOGFtW5/8MEHY8iQIZ97Pxs7mtjQmVTnnXdeTJw4MUaMGBFHHnlktG7dOioqKmLQoEGxdu3az72WiIivfOUrsdNOO+Vzur6GeJ7ZMkRhB7T33nvHlClT4tvf/vYmvxPr0KFDRPz3u/ZOnTrl9iVLltQ6A2hD+4iImD17dhx77LEbvd/GXqi2xho35aCDDopf//rXMWfOnNhvv/1y+4wZM/L2LaEoivjd734XvXv3rnGm0zpjx46NyZMnx5AhQ/Lzmz179iYfc2PP6bojp//9/YV1R1vre+CBB2Lw4ME1Tgv95JNPtujvPjRq1CgOPPDA+Otf/1rrthkzZkSnTp38kHk75GcKO6CBAwfGmjVrYuzYsbVuW716df7HP/bYY6OysjLGjRtX4+2Dm2++ebP7OOSQQ6Jjx45x880313ohWf+xmjdvHhG1X6gaao11PSX1pJNOisrKyrjttttqrPv222+PPffcM4466qjNPkZdvPTSS7Fw4cIYMmRIDBgwoNafU089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3naqU6dO9ZrbY489Ss8sX7689Mzf/va30jPsuJ555pnSM/W9IB4Ny5ECAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQXCV1O3XaaafVa64+V1d98MEHS89Mmzat9Ayw/XOkAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGA5IJ426lBgwbVa2758uWlZ2655ZZ67QvY8ThSACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAckG8HczcuXNLz7z44osNsBLgi8iRAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkgvibQXNmzcvPVNZWdkAKwHYNEcKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABILoi3FQwcOLD0zN57712vfS1durRec/B5nHjiiVttX6tXr95q+/oycqQAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkV0kFaujatWvpmf79+zfASjbssssu22r7+jJypABAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgOSCeLADq8/F7S666KLSM23atCk989JLL5WeiYh48skn6zVH3ThSACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAckG8rWDhwoWlZz788MMtvxC+0Bo3blx6ZuTIkaVnTj311NIzixYtKj1Tn7VFRKxevbpec9SNIwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKAKSKoiiKOt2xoqKh18J6Xn/99XrN1fHLWUPPnj1LzyxdurT0zI6oS5cupWeGDx9er30dcsghpWcOPfTQeu2rrN69e5eeee655xpgJWxKXV4fHCkAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACA12dYLYMvad999S8888cQTpWfefffd0jM7oiOOOKL0TNu2bRtgJRtWnwsX/ulPfyo9M3PmzNIzbJ8cKQCQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAKmiKIqiTnesqGjotbCek08+uV5zl19+eemZgw8+uF77on7Wrl1br7l///vfpWduvPHG0jPXXntt6Rm+GOrycu9IAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIAyQXxdjB77LFH6Zknnnii9MwBBxxQemZHdOedd5aemTVrVr32dfvtt9drDtZxQTwAShEFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYDkgngAXxIuiAdAKaIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJCa1PWORVE05DoA2A44UgAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAg/T+M1NCCiz0i0wAAAABJRU5ErkJggg==\n"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"# --------------------------\n# MLP on Digits Dataset (No Internet Needed)\n# --------------------------\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nimport matplotlib.pyplot as plt\n\n# Load digits dataset (built-in, no download)\ndigits = load_digits()\nX = digits.data / 16.0   # normalize pixel values (0–16 → 0–1)\ny = digits.target\n\n# Split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.1, random_state=42, stratify=y\n)\n\n# Train small MLP\nmlp = MLPClassifier(hidden_layer_sizes=(30,), max_iter=200, random_state=1, verbose=False)\nmlp.fit(X_train, y_train)\n\nprint(\"Training accuracy:\", mlp.score(X_train, y_train))\nprint(\"Testing accuracy:\", mlp.score(X_test, y_test))\n\n# Predict one example\nindex = 10\ntest_digit = X_test[index].reshape(1, -1)\npred = mlp.predict(test_digit)[0]\nprint(\"Predicted:\", pred)\nprint(\"Actual:\", y_test[index])\n\n# Visualize\nplt.imshow(X_test[index].reshape(8, 8), cmap='gray')\nplt.title(f\"Predicted: {pred} | Actual: {y_test[index]}\")\nplt.axis('off')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-17T05:13:03.099151Z","iopub.execute_input":"2025-10-17T05:13:03.099708Z","iopub.status.idle":"2025-10-17T05:13:04.550833Z","shell.execute_reply.started":"2025-10-17T05:13:03.099682Z","shell.execute_reply":"2025-10-17T05:13:04.550061Z"}},"outputs":[{"name":"stdout","text":"Training accuracy: 0.9919604205318491\nTesting accuracy: 0.9777777777777777\nPredicted: 2\nActual: 2\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAATIklEQVR4nO3ce5BWdf3A8c8DGNdVEBfFrAUqjFKHkrEUY8W45IIFpqY5I5cYyVGQ0sHGGRPU0WkmFO/jpZHG1kqwdGwoEpIhm8ZqvJQCJbQ4ijcy8Vog7Pf3h8Pnx7og68r6EL5eMzsM5znPOZ89yzzvPec5D5VSSgkAiIhO1R4AgD2HKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKLBDAwYMiMmTJ+ffly9fHpVKJZYvX161md7pnTNWY/9z5syp2v4/COvWrYtKpRILFiyo9ih8QERhD7RgwYKoVCr51a1btxg8eHCce+658cILL1R7vPdk8eLFe+QL5+rVq2P27NkxdOjQqKmpif79+8e4cePiL3/5S4fud/bs2VGpVOIb3/hGu7excuXKmDNnTqxbt273DdZBli1bFlOnTo3BgwdHjx49YtCgQTFt2rR47rnnqj0aOyEKe7BLL7007rjjjrj++uvjmGOOiZtuuimOPvroePPNNz/wWUaMGBH/+c9/YsSIEe/peYsXL465c+d20FTtd9ttt8Wtt94aw4YNi3nz5sV3v/vd+Pvf/x5f/OIXY+nSpR2yz1JK/PSnP40BAwbEfffdF6+99lq7trNy5cqYO3fu/0QULrzwwli+fHlMnDgxrr322jjttNPirrvuis997nPx/PPPV3s8dqBLtQdg50444YQYNmxYRERMmzYt+vbtG1dddVXce++9cfrpp+/wOW+88Ub07Nlzt8/SqVOn6Nat227fbrWcfvrpMWfOnOjVq1cumzp1agwZMiTmzJkTo0aN2u37XL58eTzzzDPxu9/9LsaOHRu/+MUvYtKkSbt9P3uSq666Ko499tjo1On/f//8yle+EvX19XH99dfH5ZdfXsXp2BFnCv9Djj/++IiIaGpqioiIyZMnR69evWLt2rXR0NAQNTU1ccYZZ0RERHNzc8yfPz8++9nPRrdu3eLAAw+M6dOnx8svv9xim6WUuPzyy+OQQw6JHj16xMiRI+OJJ55ote+dvafw0EMPRUNDQ/Tp0yd69uwZRxxxRFxzzTU53w033BAR0eJy2Da7e8aIiLVr18batWt3eSyPPPLIFkGIiOjbt2986UtfilWrVu3y+e3R2NgYn/nMZ2LkyJExatSoaGxs3OF669evj29961tx8MEHR9euXWPgwIFx9tlnx+bNm2PBggVxyimnRETEyJEj85hu+7lUKpUdXq575/sv//73v+OCCy6Iww8/PHr16hX77rtvnHDCCfHYY4/t8vt46623YvXq1W26BDRixIgWQdi2bP/99++w48z740zhf8i2F7u+ffvmsi1btsTYsWPj2GOPjR/+8IfRo0ePiIiYPn16LFiwIKZMmRIzZ86MpqamuP766+ORRx6JP/zhD7HPPvtERMT3v//9uPzyy6OhoSEaGhri4YcfjjFjxsTmzZt3Oc/9998f48ePj/79+8d5550XBx10UKxatSp+9atfxXnnnRfTp0+PZ599Nu6///644447Wj2/I2b88pe/HBHR7ksrzz//fBxwwAHteu672bRpU9x9991x/vnnR8TbZypTpkyJ559/Pg466KBc79lnn42jjjoqNm7cGGeddVZ8+tOfjvXr18eiRYvizTffjBEjRsTMmTPj2muvjYsuuiiGDBkSEZF/ttU///nPuOeee+KUU06JgQMHxgsvvBA333xz1NfXx8qVK+Pggw/e6XPXr18fQ4YMiUmTJrXrDejXX389Xn/99Q45zuwGhT3O7bffXiKiLF26tGzYsKE8/fTT5Wc/+1np27dv6d69e3nmmWdKKaVMmjSpRET53ve+1+L5v//970tElMbGxhbLf/Ob37RY/uKLL5aPfOQjZdy4caW5uTnXu+iii0pElEmTJuWyBx54oEREeeCBB0oppWzZsqUMHDiw1NXVlZdffrnFfrbf1jnnnFN29M+sI2YspZS6urpSV1fXan9tsWLFilKpVMrFF1/cpvXr6urKJZdc0qZ1Fy1aVCKiPPnkk6WUUl599dXSrVu3cvXVV7dY78wzzyydOnUqf/7zn1ttY9v3v3DhwhY/i+1FxA5nqqura3Gs/vvf/5atW7e2WKepqal07dq1XHrppS2WRUS5/fbbWy1757Fvq8suu6xERFm2bFm7nk/HcvloDzZq1Kiora2Nj33sY3HaaadFr1694pe//GV89KMfbbHe2Wef3eLvCxcujP322y9Gjx4d//rXv/Jr2yWTBx54ICIili5dGps3b44ZM2a0uKwza9asXc72yCOPRFNTU8yaNSt69+7d4rHtt7UzHTXjunXr2nWW8OKLL8Y3v/nNGDhwYMyePfs9P39XGhsbY9iwYfHJT34yIiJqampi3LhxLS4hNTc3xz333BMnnnhivpe0vbYc17bq2rVrXtbZunVrvPTSS9GrV6849NBD4+GHH37X5w4YMCBKKe06S1ixYkXMnTs3Tj311Lwcyp7F5aM92A033BCDBw+OLl26xIEHHhiHHnpoq+uzXbp0iUMOOaTFsieffDJeeeWV6Nev3w63++KLL0ZExFNPPRUREZ/61KdaPF5bWxt9+vR519m2Xco67LDD2v4NfcAzttUbb7wR48ePj9deey0efPDBVu81vF8bN26MxYsXx7nnnhtr1qzJ5cOHD4+77747/vGPf8TgwYNjw4YN8eqrr7b7mL4Xzc3Ncc0118SNN94YTU1NsXXr1nxs+8uTu9Pq1atj4sSJcdhhh8Vtt93WIfvg/ROFPdhRRx21w98Yt7f9b3zbNDc3R79+/Xb6RmZtbe1um7G99pQZN2/eHCeddFL89a9/jSVLlnTIC/LChQtj06ZNMW/evJg3b16rxxsbGzv8tt3tX/QjIq644oq4+OKLY+rUqXHZZZfF/vvvH506dYpZs2ZFc3Pzbt//008/HWPGjIn99tsvFi9eHDU1Nbt9H+weorAX+sQnPhFLly6N4cOHR/fu3Xe6Xl1dXUS8/Vv7oEGDcvmGDRta3QG0o31ERDz++OPvevvmzi55fBAz7kpzc3OceeaZsWzZsrjrrruivr7+fW1vZxobG+Owww6LSy65pNVjN998c9x5550xd+7cqK2tjX333Tcef/zxd93eu11G6tOnT2zcuLHFss2bN7e6U2jRokUxcuTI+NGPftRi+caNG3f7G8AvvfRSjBkzJjZt2hTLli2L/v3779bts3t5T2EvdOqpp8bWrVvjsssua/XYli1b8kVj1KhRsc8++8R1110XpZRcZ/78+bvcx+c///kYOHBgzJ8/v9WL0Pbb2vaZiXeu01EztvWW1IiIGTNmxM9//vO48cYb46STTmrTc96rp59+OlasWBGnnnpqnHzyya2+pkyZEmvWrImHHnooOnXqFBMmTIj77rtvh5+s3vb97+yYRrwd2xUrVrRYdsstt7Q6U+jcuXOL4xnx9hnN+vXrd/k9vZdbUt94441oaGiI9evXx+LFi1tdBmTP40xhL1RfXx/Tp0+PK6+8Mh599NEYM2ZM7LPPPvHkk0/GwoUL45prromTTz45amtr44ILLogrr7wyxo8fHw0NDfHII4/Er3/9613+ttipU6e46aab4sQTT4yhQ4fGlClTon///rF69ep44oknYsmSJRHx9ucBIiJmzpwZY8eOjc6dO8dpp53WYTO29ZbU+fPnx4033hhHH3109OjRI37yk5+0eHzixIm75UOAd955Z5RS4qtf/eoOH29oaIguXbpEY2NjfOELX4grrrgifvvb30Z9fX2cddZZMWTIkHjuuedi4cKF8eCDD0bv3r1j6NCh0blz5/jBD34Qr7zySnTt2jWOP/746NevX0ybNi2+/e1vx9e//vUYPXp0PPbYY7FkyZJWx2r8+PFx6aWXxpQpU+KYY46Jv/3tb9HY2NjibGxn3sstqWeccUb86U9/iqlTp8aqVatafDahV69eMWHChF3ujw9YFe98Yie23ZK6o9sStzdp0qTSs2fPnT5+yy23lCOPPLJ079691NTUlMMPP7zMnj27PPvss7nO1q1by9y5c0v//v1L9+7dy3HHHVcef/zxVrcwvvOW1G0efPDBMnr06FJTU1N69uxZjjjiiHLdddfl41u2bCkzZswotbW1pVKptLo9dXfOWErbb0nddjvvzr6ampp2uY223JJ6+OGHl49//OPvus5xxx1X+vXrV956661SSilPPfVUOfPMM0ttbW3p2rVrGTRoUDnnnHPKpk2b8jm33nprGTRoUOncuXOLn8vWrVvLhRdeWA444IDSo0ePMnbs2LJmzZod3pJ6/vnn5zEdPnx4+eMf/1jq6+tLfX19rvd+b0mtq6vb6TFu763DdKxKKe84hwTaZNunhPfE//AP2st7CgAkUQAgiQIAyXsKACRnCgAkUQAgtfnDa7vzf2iEPVFbPsm9JzruuOOqPUK7DB06tNojfOi05d0CZwoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAECqlFJKm1asVDp6FvYSAwYMqPYI7dLU1FTtET5U+vTpU+0R2m3jxo3VHqFd2vJy70wBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIlVJKadOKlUpHz8Je4mtf+1q1R2iXkSNHVnuEdpk8eXK1R2iX3r17V3uED522vNw7UwAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJC6VHsA9j733ntvtUf4UJkwYUK1R2Av4kwBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIXao9AHufoUOHVnuEdvnxj39c7RHaZc6cOdUegb2IMwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACBVSimlTStWKh09S4eYNWtWtUdol6uvvrraI3zo3HvvvdUeoV0mTJhQ7RH4H9GWl3tnCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQKqUUkqbVqxUOnoWtnPPPfdUe4R2Gzp0aLVHaJe6urpqj9Au3/nOd6o9QrssX7682iO026OPPlrtEdqlLS/3zhQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgCkSimltGnFSqWjZ4Gqmj9/frVHaJfJkydXe4R2WbBgQbVHaLdZs2ZVe4R2acvLvTMFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgVUoppdpDALBncKYAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQPo/7tHfky/IAMoAAAAASUVORK5CYII=\n"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"### 5. Find the relation between learning rate and loss (or) number  of iterations and loss.\n  ","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_moons\nfrom sklearn.metrics import log_loss\n\n# 1. Generate Data\nX, y = make_moons(n_samples=300, noise=0.25, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(StandardScaler().fit_transform(X), y, test_size=0.5)\n\n# 2. Create plots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# --- Plot 1: Learning Rate vs. Loss ---\nfor lr in [1.0, 0.01, 0.0001]:\n    mlp = MLPClassifier(hidden_layer_sizes=(20,), learning_rate_init=lr, max_iter=300, random_state=42).fit(X_train, y_train)\n    ax1.plot(mlp.loss_curve_, label=f\"LR = {lr}\")\nax1.set_title(\"Learning Rate vs. Loss\"); ax1.set_xlabel(\"Iterations\"); ax1.legend(); ax1.grid(True)\n\n# --- Plot 2: Iterations vs. Loss (Overfitting) ---\nmlp_overfit = MLPClassifier(hidden_layer_sizes=(50,), max_iter=1, warm_start=True, random_state=42)\ntrain_loss, val_loss = [], []\nfor _ in range(200):\n    mlp_overfit.fit(X_train, y_train)\n    train_loss.append(mlp_overfit.loss_)\n    val_loss.append(log_loss(y_val, mlp_overfit.predict_proba(X_val))) # Validation loss\nax2.plot(train_loss, label=\"Train Loss\")\nax2.plot(val_loss, label=\"Validation Loss\")\nax2.set_title(\"Iterations vs. Loss\"); ax2.set_xlabel(\"Iterations\"); ax2.legend(); ax2.grid(True); ax2.set_ylim(0, 1)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-30T17:13:13.140057Z","iopub.execute_input":"2025-10-30T17:13:13.140242Z","iopub.status.idle":"2025-10-30T17:13:15.749142Z","shell.execute_reply.started":"2025-10-30T17:13:13.140226Z","shell.execute_reply":"2025-10-30T17:13:15.748345Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (300) reached and the optimization hasn't converged yet.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (300) reached and the optimization hasn't converged yet.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (1) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":1},{"cell_type":"markdown","source":"### 6. Find the relation between number of neurons with learning rate and iterations.","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_classification\n\n# Generate Data\nX, y = make_classification(n_samples=500, n_features=15, random_state=42)\nX = StandardScaler().fit_transform(X)\n\n# --- Define and train models ---\nmodels = {\n    # Simple model can use a higher LR\n    \"Simple (10 neurons, LR=0.01)\": MLPClassifier(hidden_layer_sizes=(10,), learning_rate_init=0.01, random_state=42, max_iter=400),\n    # Complex model needs a smaller LR\n    \"Complex (100 neurons, LR=0.001)\": MLPClassifier(hidden_layer_sizes=(100,), learning_rate_init=0.001, random_state=42, max_iter=400)\n}\n\n# --- Print results ---\nfor name, model in models.items():\n    model.fit(X, y)\n    print(f\"\\n{name}:\")\n    print(f\"  - Converged in {model.n_iter_} iterations.\")\n    print(f\"  - Final Loss: {model.loss_:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-30T17:33:07.853899Z","iopub.execute_input":"2025-10-30T17:33:07.854467Z","iopub.status.idle":"2025-10-30T17:33:09.261959Z","shell.execute_reply.started":"2025-10-30T17:33:07.854424Z","shell.execute_reply":"2025-10-30T17:33:09.261160Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (400) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"\nSimple (10 neurons, LR=0.01):\n  - Converged in 400 iterations.\n  - Final Loss: 0.0349\n\nComplex (100 neurons, LR=0.001):\n  - Converged in 400 iterations.\n  - Final Loss: 0.0518\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (400) reached and the optimization hasn't converged yet.\n  warnings.warn(\n","output_type":"stream"}],"execution_count":2}]}